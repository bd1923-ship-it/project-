# -*- coding: utf-8 -*-
"""career_recommender.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_vAgqdgHZa2mMQfCGLQ9qficRffE5eOT
"""

!pip install scikit-learn pandas joblib

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report
import joblib

data = pd.DataFrame({
    "skills": ["Python", "Java", "HTML", "Excel", "ML", "JavaScript", "SQL", "UI/UX", "C++", "Data Analysis"],
    "experience": [3, 2, 1, 4, 5, 2, 3, 1, 4, 5],
    "interest": ["AI", "Backend", "Frontend", "Data", "AI", "Frontend", "Database", "Design", "Backend", "Data"],
    "recommended_role": [
        "ML Engineer", "Java Developer", "Web Developer", "Data Analyst",
        "AI Engineer", "Frontend Developer", "Database Admin",
        "UI Designer", "Software Engineer", "Data Scientist"
    ]
})
print("ðŸ“„ Sample data:")
print(data)

le_skills = LabelEncoder()
le_interest = LabelEncoder()
le_role = LabelEncoder()

data["skills_enc"] = le_skills.fit_transform(data["skills"])
data["interest_enc"] = le_interest.fit_transform(data["interest"])
data["role_enc"] = le_role.fit_transform(data["recommended_role"])

X = data[["skills_enc", "experience", "interest_enc"]]
y = data["role_enc"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("\nðŸŽ¯ Accuracy:", accuracy_score(y_test, y_pred))
print("\nðŸ“Š Report:\n", classification_report(y_test, y_pred))

user_input = pd.DataFrame({
    "skills_enc": [le_skills.transform(["Python"])[0]],
    "experience": [4],
    "interest_enc": [le_interest.transform(["AI"])[0]]
})
predicted_role = le_role.inverse_transform(model.predict(user_input))
print("\nðŸ’¼ Recommended Role:", predicted_role[0])

joblib.dump(model, "career_recommender.pkl")
joblib.dump(le_skills, "le_skills.pkl")
joblib.dump(le_interest, "le_interest.pkl")
joblib.dump(le_role, "le_role.pkl")
print("\nâœ… Model and encoders saved successfully!")